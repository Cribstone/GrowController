{
  "name": "secretary",
  "version": "0.1.0",
  "author": {
    "name": "Kyle Hughes"
  },
  "description": "Bring common sense to console logging.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"No test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kylehughes/secretary.git"
  },
  "keywords": [
    "console",
    "color",
    "output",
    "format",
    "text",
    "shell",
    "xterm"
  ],
  "dependencies": {
    "cli-color": "0.2.1"
  },
  "readme": "#secretary#\n\nA *node.js* module that brings common sense to console logging.\n\n##Installation##\n\n    npm install secretary\n\n##Setup##\n\n####Configuration:####\n```javascript\nsec.configure({\n    minFlag: 1,\n    maxFlag: 5,\n    minRunningFlag: 3,\n    maxRunningFlag: 4\n});\n```\n\nThe potential configuration options are as follows:\n- __minFlag__ - *default: 1* - The lowest possible flag for any output. This must be >= 1.\n- __maxFlag__ - *default: 10* - The highest possible flag for any output. This must be >= 1.\n- __minRunningFlag__ - *default: minFlag* - The lowest flag whose output will be processed when the program is run.\nThis value must fall within the range of the *minFlag* and the *maxFlag* or it will not be registered.\n- __maxRunningFlag__ - *default: maxFlag* - The highest flag whose output will be processed when the program is run.\nThis value must fall within the range of the *minFlag* and the *maxFlag* or it will not be registered.\n\n##Usage##\n\n####Instantiation:####\n```javascript\nvar sec = require('secretary');\n```\n\n####Filtering:####\n\nOne of the key features of *secretary* is the ability to ~~litter your code with~~ thoughtfully place console logging throughout your code,\nand have it filtered out at runtime by the flag that was supplied with the output. This way, you're always in control of the verbosity of your output,\nduring development and during production. It also does away with the need for quick-and-dirty *console.log*s that you delete shortly afterwards.\n\nWe implement flags by chaining `flag()` in front of any log call, and passing it the flag level we want to set.\n\nIf we assume the following configuration:\n```javascript\nminFlag: 1,\nmaxFlag: 5,\nminRunningFlag: 3\n```\n\nAnd then run the following code:\n```javascript\nsec.flag(1).log('Beginning DEBUG output...');\nsec.flag(3).log('Integrity check successful');\nsec.flag(5).log('Server starting on port 3000');\n```\n\nWe will see the following output:\n```\nIntegrity check successful\nServer starting on port 3000\n```\n\nBy it's nature, `flag()` sets what the flag level is for the next `log()` call. Thus, the following is valid usage:\n```javascript\nsec.flag(4);\nsec.log('Starting thermonuclear war...'); // Evaluated with flag level 4\n```\n\nIt is also possible to use `log()` without any chain to `flag()` which results in the minimum running flag to be applied to the log, meaning it will always be displayed no matter what.\n\n####Formatting Data:####\n\nMuch like `console.log()`, *secretary* supports the formatting of data. `log()` can take multiple arguments in a `printf()` sort of way.\n\nThe first argument passed to `log()` is always assumed and expected to be the desired output string. If other arguments are included, they are all assumed to be data that need to be formatted into the string. String formatting is done by the `util.format()` method, so all rules that apply there apply here.\n\nThe basic supported placeholders are listed below:\n>\n- %s : String\n- %d : Number (both integer and float)\n- %j : JSON\n- % : single percent sign ('%'); this does not consume an argument\n\nFor the entire range of `util.format()` rules, see [here](http://nodejs.org/api/util.html#util_util_format_format).\n\nExamples of this in use:\n\n```javascript\nsec.flag(3).log('%s, %s.', 'Hello', 'Mister');\n// 'Hello, Mister.'\n```\n```javascript\nsec.log('%d:%d', 12);\n// '12:%d'\n```\n```javascript\nsec.flag(1).log('Hello', '1', '2', 3);\n// 'Hello 1 2 3'\n```",
  "readmeFilename": "README.md",
  "_id": "secretary@0.1.0",
  "dist": {
    "shasum": "2d84c18fd7ac111c0e33ed44df2472a5e16059e3"
  },
  "_from": "secretary@*",
  "_resolved": "https://registry.npmjs.org/secretary/-/secretary-0.1.0.tgz"
}
